
# Algorithm 1 pseudocode

city_distance_list array
fuel_gallons array
miles_per_gallon integer

def path
  start = 0
  d = 0
  c = 0

  for i in range
    c = (mpg * fuel_list[i]) - city_distance_list[i]
    if c < 0
      increment start by 1
      d = d + c
      set c = 0

  if c + d >= 0
    return to start to traverse next index
  else
    return -1

NOTES---------------------------------------------------------------------------
# if mpg * fuel_gallons[i] >= city_distance_list[i + 1]
# and fuel_gallons[i] > 0
# recursive function to continue the next city and the next one after???
# we want our fuel * mpg to be able to cover the distance of the next city
# AND the starting city's fuel must be greater than 0
# in order to be able to go to each city and back to the starting city
#
# mpg = 10
# city index:              0  1   2   3   4
# distance to next city = [5, 25, 15, 10, 15]
# fuel =                  [1, 2,  1,  0,  3]
#
# STARTING CITY | MILES LEFT (mpg*fuel) + NEXT CITY FUEL >= NEXT CITY DISTANCE
# ------------------------------------------------------------------------------
# city 0        | 0 + 10(1) = 10 < 25 '''not enough fuel for city 1'''
# city 1        | 0 + 10(2) = 20 > 15, 5 + 10(1) = 15 > 10, 5 + 10(0) = 5 < 15 '''not enough fuel for city 4'''
# city 2        | 0 + 10(1) = 10 = 10, 0 + 10(0) = 0 < 15 '''not enough fuel for city 4'''
# city 3        | 0 + 10(0) = 0 < 15 '''not enough fuel for city 4'''
# city 4        | 0 + 10(3) = 30 > 5, 25 + 10(1) = 35 > 25, 10 + 10(2) = 30 > 15, 15 + 10(1) = 25 > 10,
#               | 15 + 10(0) = 15 = 15 '''back at city 4 :D'''
#
# initial miles = 0
# miles = (miles_per_gallon * fuel_gallons[i])
# next_city_fuel = (miles_per_gallon * fuel_gallons[i + 1])
#
# loop this statement with either for or while
# if miles + next_city_fuel >= city_distance_list[i + 1]
#   traverse through next node
#
# else
#   print("Not enough miles to travel to next city\n")
#   return miles + next_city_fuel
#
# singly linked list implementation most likely
--------------------------------------------------------------------------------

# Algorithm 2 pseudocode

# Combine two lists
for each person:
    append current person's list to combined_list

# In-place selection sort the combined list (O(n^2))
<unsorted zone> = combined_list
<sorted zone> = empty
while <unsorted zone> IS NOT empty:
    least_index = <index of earliest end time in unsorted zone>
    <swap combined_list[least_index] to the end of the unsorted zone>
    <remove the least element from the unsorted zone>
    <add the least element to the sorted zone>
combined_list = <sorted zone>

# Get the daily activity that starts the latest
latest_start_time = person 1's start time
for each person's daily activity list:
    if current_time > latest_start_time
        latest_start_time = current_time

# Get the daily activity that ends the earliest
earliest_end_time  = person 1's end time
for each person's daily activity list:
    if current time < earliest_end_time
        earliest_end_time = current_time

# Kill events that start before the latest start time (since sorted, stop looping once a time passes the check)
for each element in combined_list:
    if element_start_time < latest_start_time
        remove element
    else
        break

# Kill events that end after the earliest end time (since sorted, stop looping once a time passes the check)
for each element in combined_list in descending order:
    if element_end time > earliest_end_time
        remove element
    else
        break

# Add latest start time to the front of the list as an event of [TIME,TIME]
start_event = [latest_start_time, latest_start_time]
combined_list.insert(position 0, start_event)

# Add latest end time to the back of the list as an event of [TIME,TIME]
end_event = [earliest_end_time, earliest_end_time]
combined_list.append(end_event)

# The Magic Move - Take the end time of one event and the start of the next to inverse the unavailability events, to availability events
# Kill events that are below the meeting duration (negative times also get killed)
for each element in combined_list
    element[0] = combined_list[i].end_time
    element[1] = combined_list[i+1].start time
    if element[1] - element[0] < duration_of_meeting
        remove element
    else
        print element
