
Algorithm 1 pseudocode:

Sample Inputs:
A = ["thismetoaklandrialtofullertonmarcolongchinofresnovallejoclovissimithound"]
B = ['marco', 'clovis', 'rialto', 'oakland']

1A = ["sanoaklandrialtofullertonmarcolongbreacoronamodestoclovissimithousand"]
1B = ['brea', 'modesto', 'clovis', 'corona']

2A = ["marcopolmonafremontrialtofullertonmarcolongfresnochinoclovissimisalinas"]
2B = ['fullerton', 'chino', 'fremont', 'fresno']

3A = ["torranceoaklandrialtomarcooxnardchinofresnoirvineclovissimiorange"]
3B = ['oxnard', 'irvine', 'orange', 'marco']

there is going to be a menu of options to choose which arrays to run algorithm on

def function(arr_A, arr_B)
    for city in arr_B
        if city in arr_A
            get index of arr_A where city shows up in arr_A
            pair = [index, city]
            append pair to temporary array
        else:
            if city not in arr_A
            break

    temp_array.sort()

    for index, city in temp_array
        append index to order_array
        append city to output_array
--------------------------------------------------------------------------------

Algorithm 2 pseudocode:

Sample Inputs and Outputs:
"ddd" becomes "3d"
"heloooooooo there" becomes "hel8o there"
"choosemeeky and tuition-free" becomes "ch2osem2eky and tuition-fr2e"

--------------------------------------------------------------------------------

Algorithm 3 pseudocode:

Sample Inputs:
array1 = [ [2, 5, 9, 21], [-1, 0, 2], [-10, 81, 121], [4, 6, 12, 20, 150] ]

array2 = [ [10, 17, 18, 21, 29], [-3, 0, 3, 7, 8, 11], [81, 88, 121, 131], [9, 11, 12, 19, 29] ]

array3 = [ [-4, -2, 0, 2, 7], [4, 6, 12, 14], [10, 15, 25], [5, 6, 10, 20, 24] ]

user enters elements into 4 dynamic lists

append the 4 lists into another list called all_lists (commas separate the 4 lists)

print array

function:
appends all the elements of each of the 4 lists into one big list where
the elements are the sum of the elements of the 4 lists

function:
sort big list from ascending order (smallest to largest)

print the sorted big list
--------------------------------------------------------------------------------
